// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/23/2024 01:23:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          sdiv
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sdiv_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
reg start;
reg [7:0] word1;
reg [3:0] word2;
// wires                                               
wire [3:0] quotient;
wire ready;
wire [3:0] remainder;

// assign statements (if any)                          
sdiv i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.quotient(quotient),
	.ready(ready),
	.remainder(remainder),
	.reset(reset),
	.start(start),
	.word1(word1),
	.word2(word2)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	repeat(12)
	begin
		clk = 1'b0;
		clk = #40000 1'b1;
		# 40000;
	end
	clk = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #60000 1'b1;
	reset = #920000 1'b0;
end 

// start
initial
begin
	start = 1'b0;
	start = #60000 1'b1;
	start = #80000 1'b0;
	start = #420000 1'b1;
	start = #80000 1'b0;
end 
// word1[ 7 ]
initial
begin
	word1[7] = 1'b0;
	word1[7] = #60000 1'b1;
	word1[7] = #80000 1'b0;
	word1[7] = #380000 1'b1;
	word1[7] = #80000 1'b0;
end 
// word1[ 6 ]
initial
begin
	word1[6] = 1'b0;
end 
// word1[ 5 ]
initial
begin
	word1[5] = 1'b0;
end 
// word1[ 4 ]
initial
begin
	word1[4] = 1'b0;
	word1[4] = #60000 1'b1;
	word1[4] = #80000 1'b0;
	word1[4] = #380000 1'b1;
	word1[4] = #80000 1'b0;
end 
// word1[ 3 ]
initial
begin
	word1[3] = 1'b0;
end 
// word1[ 2 ]
initial
begin
	word1[2] = 1'b0;
end 
// word1[ 1 ]
initial
begin
	word1[1] = 1'b0;
end 
// word1[ 0 ]
initial
begin
	word1[0] = 1'b0;
end 
// word2[ 3 ]
initial
begin
	word2[3] = 1'b0;
	word2[3] = #520000 1'b1;
	word2[3] = #80000 1'b0;
end 
// word2[ 2 ]
initial
begin
	word2[2] = 1'b0;
	word2[2] = #60000 1'b1;
	word2[2] = #80000 1'b0;
end 
// word2[ 1 ]
initial
begin
	word2[1] = 1'b0;
	word2[1] = #520000 1'b1;
	word2[1] = #80000 1'b0;
end 
// word2[ 0 ]
initial
begin
	word2[0] = 1'b0;
	word2[0] = #60000 1'b1;
	word2[0] = #80000 1'b0;
	word2[0] = #380000 1'b1;
	word2[0] = #80000 1'b0;
end 
endmodule

