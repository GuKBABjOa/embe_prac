module smul(clk, reset, start, word1, word2, product, ready);
	input clk, reset, start;
	input [3:0] word1, word2;
	output [7:0] product;
	output ready;
	wire m0; // status signal
	wire load, shift, addshift; // control signals
	wire sub; // 덧셈/뺄셈 선택신호
	
	// datapath ----------------------------------------------------
	reg [7:0] product;
	reg [3:0] multiplicand;
	wire[4:0] sum; // 5-bit
	wire[4:0] emcand, eprod;
	
	assign m0 = product[0];
	
	assign eprod = {product[7], product[7:4]}; // sign extension
	assign emcand = {multiplicand[3],multiplicand}; // sign extension
	assign sum = sub ? (eprod - emcand) : (eprod + emcand);
	
	always @ (posedge clk) begin
		if (load) begin
			multiplicand <= word1;
			product <= {4'b0, word2}; // lower 4-bit = multiplier
		end
		else if (addshift) product <= {sum, product[3:1]};
		else if (shift) product <= {product[7], product[7:1]}; // arithmetic shift
	end
	
	// control unit ---------------------------------------
	localparam S0=0, S1=1;
	reg state;
	reg [1:0] count;
	
	always @ (posedge clk, negedge reset) // state transitions
		if (~reset) state <= S0;
		else
			case (state)
			S0: if (start) begin state <= S1; count <= 3; end
			S1: if (count==0) state <= S0;
			else count <= count - 1;
			endcase
	// control signals
	assign load = (state==S0) && start;
	assign shift = (state==S1) && ~m0;
	assign addshift = (state==S1) && m0;
	assign ready = (state==S0) && reset;
	assign sub = (state==S1) && (count==0); // 추가된 제어신호
endmodule