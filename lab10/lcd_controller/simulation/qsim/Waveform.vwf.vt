// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/30/2024 03:13:15"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lcd_controller
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lcd_controller_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CS;
reg RS;
reg clk;
reg [7:0] data;
reg reset;
reg start;
// wires                                               
wire LCD_E;
wire LCD_RS;
wire LCD_RW;
wire [7:0] LCD_data;
wire done;

// assign statements (if any)                          
lcd_controller i1 (
// port map - connection between master ports and signals/registers   
	.CS(CS),
	.LCD_E(LCD_E),
	.LCD_RS(LCD_RS),
	.LCD_RW(LCD_RW),
	.LCD_data(LCD_data),
	.RS(RS),
	.clk(clk),
	.data(data),
	.done(done),
	.reset(reset),
	.start(start)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// CS
initial
begin
	CS = 1'b1;
end 

// RS
initial
begin
	RS = 1'b0;
end 
// data[ 7 ]
initial
begin
	data[7] = 1'b0;
end 
// data[ 6 ]
initial
begin
	data[6] = 1'b0;
end 
// data[ 5 ]
initial
begin
	data[5] = 1'b0;
end 
// data[ 4 ]
initial
begin
	data[4] = 1'b0;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b0;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b0;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b0;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #20000 1'b1;
	reset = #60000 1'b0;
end 

// start
initial
begin
	start = 1'b0;
	start = #40000 1'b1;
	start = #60000 1'b0;
end 
endmodule

